[
  {
    "clause_id": "C1",
    "text": "Campus Resource Portal \u2013 Backend"
  },
  {
    "clause_id": "C4",
    "text": "The Campus Resource Portal is a Node.js-based backend that supports student and"
  },
  {
    "clause_id": "C5",
    "text": "admin roles. It allows users to register, authenticate, and view or manage"
  },
  {
    "clause_id": "C6",
    "text": "announcements/posts based on role."
  },
  {
    "clause_id": "C7",
    "text": "Tech Stack: Node.js, Express, MongoDB, Mongoose, JWT, bcrypt"
  },
  {
    "clause_id": "C8",
    "text": "Security: JWT for Auth, RBAC for Access Control"
  },
  {
    "clause_id": "C14",
    "text": "\u2502   \u251c\u2500\u2500 User.js                   # User schema (name, email, password, role)"
  },
  {
    "clause_id": "C15",
    "text": "\u2502   \u2514\u2500\u2500 Post.js                   # Post schema (title, message, status, createdBy)"
  },
  {
    "clause_id": "C17",
    "text": "\u2502   \u251c\u2500\u2500 userService.js            # User registration/login logic"
  },
  {
    "clause_id": "C18",
    "text": "\u2502   \u251c\u2500\u2500 postService.js            # Post CRUD operations"
  },
  {
    "clause_id": "C20",
    "text": "\u2502   \u251c\u2500\u2500 authController.js         # Handles register/login requests"
  },
  {
    "clause_id": "C21",
    "text": "\u2502   \u2514\u2500\u2500 postController.js         # Handles post-related requests"
  },
  {
    "clause_id": "C23",
    "text": "\u2502   \u251c\u2500\u2500 authService.js            # Password hashing, token generation, validation"
  },
  {
    "clause_id": "C24",
    "text": "\u2502   \u2514\u2500\u2500 rbac.js                   # protect (JWT middleware) + allowRoles()"
  },
  {
    "clause_id": "C26",
    "text": "\u2502   \u251c\u2500\u2500 authRoutes.js             # Routes: /api/auth/register, /login"
  },
  {
    "clause_id": "C27",
    "text": "\u2502   \u2514\u2500\u2500 postRoutes.js             # Routes: /api/posts/"
  },
  {
    "clause_id": "C28",
    "text": "\u251c\u2500\u2500 .env                          # MONGO_URI, JWT_SECRET, PORT"
  },
  {
    "clause_id": "C29",
    "text": "\u2514\u2500\u2500 server.js                     # Express app entry point"
  },
  {
    "clause_id": "C31",
    "text": "JWT + RBAC Flow (CLI Diagram)"
  },
  {
    "clause_id": "C32",
    "text": "+---------+         +------------+          +-------------+"
  },
  {
    "clause_id": "C33",
    "text": "| Client  |  --->   |  /login    |   --->   |   DB (User) |"
  },
  {
    "clause_id": "C34",
    "text": "+---------+         +------------+          +-------------+"
  },
  {
    "clause_id": "C35",
    "text": "|                     |                        |"
  },
  {
    "clause_id": "C36",
    "text": "| <--- JWT Token -----+                        |"
  },
  {
    "clause_id": "C37",
    "text": "|                                             |"
  },
  {
    "clause_id": "C38",
    "text": "|--- Auth Request w/ JWT --> [ protect() middleware ]"
  },
  {
    "clause_id": "C40",
    "text": "+--------------------+"
  },
  {
    "clause_id": "C41",
    "text": "| Verify JWT Token   |"
  },
  {
    "clause_id": "C42",
    "text": "+--------------------+"
  },
  {
    "clause_id": "C44",
    "text": "[ allowRoles('admin') ]"
  },
  {
    "clause_id": "C46",
    "text": "+--------------------+"
  },
  {
    "clause_id": "C47",
    "text": "| Check user.role    |"
  },
  {
    "clause_id": "C48",
    "text": "+--------------------+"
  },
  {
    "clause_id": "C50",
    "text": "Access granted or denied"
  },
  {
    "clause_id": "C51",
    "text": "Code Overview (Major Files)"
  },
  {
    "clause_id": "C52",
    "text": "1. config/database.js"
  },
  {
    "clause_id": "C53",
    "text": "const mongoose = require('mongoose');"
  },
  {
    "clause_id": "C54",
    "text": "const connectDB = async () => {"
  },
  {
    "clause_id": "C56",
    "text": "await mongoose.connect(process.env.MONGO_URI);"
  },
  {
    "clause_id": "C57",
    "text": "console.log('MongoDB connected');"
  },
  {
    "clause_id": "C64",
    "text": "module.exports = connectDB;"
  },
  {
    "clause_id": "C66",
    "text": "const mongoose = require('mongoose');"
  },
  {
    "clause_id": "C67",
    "text": "const userSchema = new mongoose.Schema({"
  },
  {
    "clause_id": "C69",
    "text": "email: { type: String, unique: true },"
  },
  {
    "clause_id": "C71",
    "text": "role: { type: String, enum: ['student', 'admin'], default: 'student' }"
  },
  {
    "clause_id": "C73",
    "text": "module.exports = mongoose.model('User', userSchema);"
  },
  {
    "clause_id": "C74",
    "text": "3. auth/authService.js"
  },
  {
    "clause_id": "C75",
    "text": "const jwt = require('jsonwebtoken');"
  },
  {
    "clause_id": "C76",
    "text": "const bcrypt = require('bcryptjs');"
  },
  {
    "clause_id": "C77",
    "text": "const generateToken = (user) => {"
  },
  {
    "clause_id": "C78",
    "text": "return jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, {"
  },
  {
    "clause_id": "C82",
    "text": "const hashPassword = (password) => bcrypt.hash(password, 10);"
  },
  {
    "clause_id": "C83",
    "text": "const comparePasswords = (input, hash) => bcrypt.compare(input, hash);"
  },
  {
    "clause_id": "C84",
    "text": "module.exports = { generateToken, hashPassword, comparePasswords };"
  },
  {
    "clause_id": "C87",
    "text": "const jwt = require('jsonwebtoken');"
  },
  {
    "clause_id": "C88",
    "text": "const protect = (req, res, next) => {"
  },
  {
    "clause_id": "C89",
    "text": "const token = req.headers.authorization?.split(' ')[1];"
  },
  {
    "clause_id": "C90",
    "text": "if (!token) return res.status(401).json({ msg: 'No token' });"
  },
  {
    "clause_id": "C92",
    "text": "req.user = jwt.verify(token, process.env.JWT_SECRET);"
  },
  {
    "clause_id": "C95",
    "text": "res.status(401).json({ msg: 'Invalid token' });"
  },
  {
    "clause_id": "C98",
    "text": "const allowRoles = (...roles) => (req, res, next) => {"
  },
  {
    "clause_id": "C99",
    "text": "if (!roles.includes(req.user.role)) {"
  },
  {
    "clause_id": "C100",
    "text": "return res.status(403).json({ msg: 'Access denied' });"
  },
  {
    "clause_id": "C104",
    "text": "module.exports = { protect, allowRoles };"
  },
  {
    "clause_id": "C106",
    "text": "5. routes/postRoutes.js"
  },
  {
    "clause_id": "C107",
    "text": "const express = require('express');"
  },
  {
    "clause_id": "C108",
    "text": "const router = express.Router();"
  },
  {
    "clause_id": "C109",
    "text": "const { protect, allowRoles } = require('../auth/rbac');"
  },
  {
    "clause_id": "C115",
    "text": "} = require('../controllers/postController');"
  },
  {
    "clause_id": "C116",
    "text": "router.post('/', protect, allowRoles('admin'), createPost);"
  },
  {
    "clause_id": "C117",
    "text": "router.get('/', protect, getAllPosts);"
  },
  {
    "clause_id": "C118",
    "text": "router.put('/:id', protect, allowRoles('admin'), updatePost);"
  },
  {
    "clause_id": "C119",
    "text": "router.delete('/:id', protect, allowRoles('admin'), deletePost);"
  },
  {
    "clause_id": "C120",
    "text": "module.exports = router;"
  },
  {
    "clause_id": "C156",
    "text": "Sample Request Bodies"
  },
  {
    "clause_id": "C158",
    "text": "POST /api/auth/register"
  },
  {
    "clause_id": "C161",
    "text": "\"email\": \"john@student.com\","
  },
  {
    "clause_id": "C162",
    "text": "\"password\": \"12345678\""
  },
  {
    "clause_id": "C167",
    "text": "\"email\": \"john@student.com\","
  },
  {
    "clause_id": "C168",
    "text": "\"password\": \"12345678\""
  },
  {
    "clause_id": "C172",
    "text": "Authorization: Bearer <JWT>"
  },
  {
    "clause_id": "C174",
    "text": "\"title\": \"Exam Notice\","
  },
  {
    "clause_id": "C175",
    "text": "\"message\": \"Midterms start next week\","
  },
  {
    "clause_id": "C181",
    "text": "1. authController.register() \u2192 userService.registerUser()"
  },
  {
    "clause_id": "C183",
    "text": "3. Role set as 'student' by default"
  },
  {
    "clause_id": "C186",
    "text": "1. authController.login() \u2192 userService.loginUser()"
  },
  {
    "clause_id": "C187",
    "text": "2. Password validated"
  },
  {
    "clause_id": "C189",
    "text": "Post Creation (Admin Only)"
  },
  {
    "clause_id": "C190",
    "text": "1. postController.createPost() calls service"
  },
  {
    "clause_id": "C191",
    "text": "2. Protected by protect + allowRoles('admin')"
  },
  {
    "clause_id": "C192",
    "text": "Post Viewing (All Authenticated)"
  },
  {
    "clause_id": "C193",
    "text": "1. getAllPosts() returns all posts"
  },
  {
    "clause_id": "C198",
    "text": "Mongoose schemas for DB"
  },
  {
    "clause_id": "C203",
    "text": "Request/response orchestration"
  },
  {
    "clause_id": "C205",
    "text": "API endpoints + route-level"
  },
  {
    "clause_id": "C208",
    "text": "JWT issuance, password security,"
  },
  {
    "clause_id": "C210",
    "text": "Would you like the PDF version, Postman collection, or React frontend next?"
  },
  {
    "clause_id": "C214",
    "text": "\u25cfAllows both students and admins to register."
  },
  {
    "clause_id": "C215",
    "text": "\u25cfAutomatically assigns default role as student unless explicitly set as admin."
  },
  {
    "clause_id": "C217",
    "text": "\u25cfAuthenticates users with email and password."
  },
  {
    "clause_id": "C218",
    "text": "\u25cfReturns a JWT token upon successful login for secure session handling."
  },
  {
    "clause_id": "C219",
    "text": "3. Role-Based Access Control (RBAC)"
  },
  {
    "clause_id": "C220",
    "text": "\u25cfMiddleware-driven control:"
  },
  {
    "clause_id": "C221",
    "text": "\u25cfprotect middleware ensures the user is authenticated."
  },
  {
    "clause_id": "C222",
    "text": "\u25cfallowRoles('admin') restricts actions based on role."
  },
  {
    "clause_id": "C223",
    "text": "\u25cfEnsures only admins can manage posts, students can only view."
  },
  {
    "clause_id": "C224",
    "text": "Post Management (Admin Only)"
  },
  {
    "clause_id": "C226",
    "text": "\u25cfAdmin can create resource/facility-related posts with:"
  },
  {
    "clause_id": "C229",
    "text": "\u25cfstatus (Active or Closed)"
  },
  {
    "clause_id": "C230",
    "text": "\u25cfAutomatically records createdBy field."
  },
  {
    "clause_id": "C232",
    "text": "\u25cfAdmin can edit the content and status of posts."
  },
  {
    "clause_id": "C234",
    "text": "\u25cfAdmin can delete any post by ID."
  },
  {
    "clause_id": "C237",
    "text": "Post Viewing (Student & Admin)"
  },
  {
    "clause_id": "C239",
    "text": "\u25cfAll users (students and admins) can view all available posts."
  },
  {
    "clause_id": "C241",
    "text": "\u25cfAny user can fetch a specific post by its ID."
  },
  {
    "clause_id": "C243",
    "text": "9. JWT-Based Authentication"
  },
  {
    "clause_id": "C244",
    "text": "\u25cfEvery route (except /register, /login) is protected via JWT."
  },
  {
    "clause_id": "C245",
    "text": "\u25cfTokens include user ID and role."
  },
  {
    "clause_id": "C247",
    "text": "\u25cfPasswords are securely hashed using bcrypt before storing."
  },
  {
    "clause_id": "C248",
    "text": "11. Authorization Middleware"
  },
  {
    "clause_id": "C249",
    "text": "\u25cfPrevents students from accessing or modifying admin-level routes."
  },
  {
    "clause_id": "C252",
    "text": "\u25cfSeparated into clean folders:"
  },
  {
    "clause_id": "C253",
    "text": "\u25cfmodels, routes, services, controllers, auth, config."
  },
  {
    "clause_id": "C254",
    "text": "13. Environment Config"
  },
  {
    "clause_id": "C255",
    "text": "\u25cfSecure .env file usage:"
  },
  {
    "clause_id": "C256",
    "text": "\u25cfPORT, MONGO_URI, JWT_SECRET."
  },
  {
    "clause_id": "C258",
    "text": "\u25cfAllows requests from other origins like React frontend."
  },
  {
    "clause_id": "C260",
    "text": "Developer-Friendly Features"
  },
  {
    "clause_id": "C261",
    "text": "15. API Ready for Frontend"
  },
  {
    "clause_id": "C263",
    "text": "\u25cfJSON structured responses."
  },
  {
    "clause_id": "C264",
    "text": "\u25cfStatus codes (200, 201, 400, 401, 403, 500) for clarity."
  },
  {
    "clause_id": "C265",
    "text": "16. Easy Testing with Postman"
  },
  {
    "clause_id": "C266",
    "text": "\u25cfToken-based testing."
  },
  {
    "clause_id": "C267",
    "text": "\u25cfCRUD operations covered for posts."
  },
  {
    "clause_id": "C268",
    "text": "\u25cfAuthentication workflows fully testable."
  },
  {
    "clause_id": "C269",
    "text": "Optional Extensible Features (Possible"
  },
  {
    "clause_id": "C274",
    "text": "Add script to create initial admin user via CLI."
  },
  {
    "clause_id": "C276",
    "text": "Use Mongoose timestamps for post logs."
  },
  {
    "clause_id": "C278",
    "text": "Add keyword search or status filter to posts."
  },
  {
    "clause_id": "C281",
    "text": "Send email on post creation/update"
  },
  {
    "clause_id": "C284",
    "text": "Add request logging (e.g., morgan) for audit"
  }
]